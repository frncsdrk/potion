'use strict';class Component{constructor(){return this._events={},console.log("Component constructor init:",this.init),this.init&&this.after("init",this.init),this}trigger(a,b){let c=this._events["before."+a],d=this._events[a],e=this._events["after."+a],f={};if(Array.isArray(c)&&0<c.length){for(let a=0;a<c.length;a++)c[a](b);f.before=!0}if(Array.isArray(d)&&0<d.length){for(let a=0;a<d.length;a++)d[a](b);f.event=!0}if(Array.isArray(e)&&0<e.length){for(let a=0;a<e.length;a++)e[a](b);f.after=!0}return f}before(a,b){return!("function"!=typeof b)&&void(!Array.isArray(this._events["before."+a])&&(this._events["before."+a]=[]),this._events["before."+a].push(b))}on(a,b){return!("function"!=typeof b)&&void(!Array.isArray(this._events[a])&&(this._events[a]=[]),this._events[a].push(b))}after(a,b){return!("function"!=typeof b)&&void(!Array.isArray(this._events["after."+a])&&(this._events["after."+a]=[]),this._events["after."+a].push(b))}onInit(){return this.trigger("init",this)}}class Renaissance{constructor(){return this.adapters={},this}registerAdapter(a,b){if("undefined"!=typeof this.adapters[a])return!1;let c=new b;return this.adapters[a]=c,c}registerMixin(a,b,c){return!("undefined"!=typeof b.prototype[a])&&(b.prototype[a]=c,!0)}registerPlugin(a,b){return!("undefined"!=typeof this[a])&&(this[a]=new b(this),!0)}}const instance=new Renaissance,renaissance=instance,r=instance;module.exports={Renaissance,renaissance,r,Component};